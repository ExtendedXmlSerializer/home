environment:
  BUILD_SOLUTION_PATH: '.\ExtendedXmlSerializer.sln'
  BUILD_DOCUMENTATION_PATH: '.\documentation\docfx.json'
  API_GITHUB_TOKEN:
    secure: JB8ibMm+7Qvfc2Kd1jhFs2Yh6Q0AvsxneG9W5EvCP2enVbhZDU3pjCjMp+AUBgrU
  API_APPVEYOR_TOKEN:
    secure: xQR4THytwto+UTuQtpj5N5RcD4pDHIJVnahrbQ7Xqjs=
  DEPLOY_KEY:
    secure: gw4s8lJBH6erxHXzmAXO3GiXQyTr+sU2y2ADADUP07FeUHyTSWypnnjjJVg02H7EYrkaLMGoIeo6UAWgftm62+BDmdCUPxG9H4tx/2fAbfjc+q6pF+X5qtz6FONRcgJk
  DEPLOY_USER: ExtendedXmlSerializer Automation via AppVeyor
  DEPLOY_EMAIL: ExtendedXmlSerializer@users.noreply.github.com

image: Visual Studio 2022

skip_tags: true
skip_non_tags: true
skip_commits:
  author: /Automation Agent/

only_commits:
  files:
    - '*.sln'
    - '.build\**\*'
    - src\**\*
    - test\**\*
    - documentation\**\*

configuration: Debug

dotnet_csproj:
  patch: true
  file: src\*\*.csproj
  version_prefix: '{version}'

nuget:
  project_feed: false
  disable_publish_on_pr: true

pull_requests:
  do_not_increment_build_number: true

for:
- # Development
  skip_non_tags: false
  branches:
    only:
      - master

  install:
    - ps: . .\.build\Install.ps1

  build_script:
  - ps: |
        Exec { & dotnet build $env:BUILD_SOLUTION_PATH -c Release }
        Exec { & dotnet pack $env:BUILD_SOLUTION_PATH -c Release }

  notifications:
    - provider: GitHubPullRequest
      template: |
        {{#passed}}:white_check_mark:{{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})

        {{#passed}}
        Install it by running the following command in [Package Manager Console](https://docs.microsoft.com/en-us/nuget/consume-packages/install-use-packages-powershell):

        ```
        Install-Package ExtendedXmlSerializer -Version {{buildVersion}} -Source https://ci.appveyor.com/nuget/extendedxmlserializer-preview
        ```

        Problems with the above command? You may be running into this known issue here:
        https://github.com/NuGet/Home/issues/7189
        {{/passed}}
      on_build_success: true

  after_test:
    - ps: Exec { & dotnet test $env:BUILD_SOLUTION_PATH -c Release -f netcoreapp3.1 }

  nuget:
    project_feed: true
    disable_publish_on_pr: false

  artifacts:
    - path: src\**\*.nupkg
      name: 'Preview Package $(APPVEYOR_BUILD_VERSION)'

- # Debug
  skip_non_tags: false
  branches:
    only:
      - /debug\/\w*/

  cache:
    - '%USERPROFILE%\.ssh\known_hosts'

  install:
    - ps: . .\.build\Install.ps1
    - ps: .\.build\Prepare-Deployment.ps1

  build_script:
    - ps: Exec { & dotnet pack $env:BUILD_SOLUTION_PATH -c Release }
    - ps: Exec { & docfx $env:BUILD_DOCUMENTATION_PATH }

  test: off

  on_success:
    - ps: .\.build\Deploy-Documentation.ps1


- # Deploy
  branches:
    only:
      - /\d*\.\d*\.\d*/

  init:
    - ps: |
          if (!$env:APPVEYOR_FORCED_BUILD)
          {
            throw "This configuration should only be called from external workflows."
          }

  cache:
    - '%USERPROFILE%\.ssh\known_hosts'

  install:
    - ps: . .\.build\Install.ps1
    - ps: .\.build\Prepare-Deployment.ps1

  build_script:
    - ps: Exec { & dotnet pack $env:BUILD_SOLUTION_PATH -c Release }
    - ps: Exec { & docfx $env:BUILD_DOCUMENTATION_PATH }

  test: off

  before_deploy:
    - ps: .\.build\Store-CurrentRelease.ps1

  artifacts:
    - path: src\**\*.nupkg
      name: '$(APPVEYOR_PROJECT_NAME) $(APPVEYOR_BUILD_VERSION)'

  deploy:
    - provider: GitHub
      tag: $(APPVEYOR_REPO_TAG_NAME)
      release: $(DEPLOY_RELEASE_NAME)
      description: $(DEPLOY_RELEASE_DESCRIPTION)
      artifact: /.*\.nupkg/
      draft: false
      prerelease: $(DEPLOY_RELEASE_IS_PRERELEASE)
      auth_token: $(API_GITHUB_TOKEN)
      force_update: true
    - provider: NuGet
      name: production
      api_key:
        secure: clbJcFvVha1lBNJaYsZZrGhKMmKVWiFDko7SN7io5FOwKKp/13vjmy7VuqG65W6u
  on_success:
    - ps: .\.build\Deploy-Documentation.ps1
